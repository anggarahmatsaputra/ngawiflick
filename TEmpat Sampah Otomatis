#include <NewPing.h>
#include <ESP32Servo.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>

#define TRIG_PIN_1 12 // Definisi pin trigger untuk sensor jarak
#define ECHO_PIN_1 13 // Definisi pin echo untuk sensor jarak 
#define TRIG_PIN_2 15 // Definisi pin trigger untuk sensor kapasitas
#define ECHO_PIN_2 14 // Definisi pin echo untuk sensor kapasitas
#define SERVO_PIN 18
#define LED_HIJAU 25
#define LED_KUNING 32
#define LED_MERAH 4
#define BUZZER_PIN 19
#define ISD1820_PIN 23 

#define MAX_DISTANCE 100 // jarak max untuk sensor

#define LCD_ADDRESS 0x27
LiquidCrystal_I2C lcd(LCD_ADDRESS, 16, 2);
 
Servo myServo;
NewPing sensor1(TRIG_PIN_1, ECHO_PIN_1, MAX_DISTANCE);
NewPing sensor2(TRIG_PIN_2, ECHO_PIN_2, MAX_DISTANCE);

// Variabel untuk login ke Blynk
#define BLYNK_TEMPLATE_ID "TMPL6VezOQJwR"
#define BLYNK_TEMPLATE_NAME "Monitoring sampah"
#define BLYNK_AUTH_TOKEN "J8cBj-22AXL0CEQJouZ-00jQ00jqe7fn"

// Variabel untuk konek ke wifi
const char *ssid = "Panjul";

const char *pass = "ucokbaba";

// Variabel untuk mencegah delay yang tidak beraturan
unsigned long previousTimeH = 0;
unsigned long previousTimeK = 0;
unsigned long previousTimeM = 0;
unsigned long previousLCDScrollTime = 0;

bool wifiConnected = false; //Variabel untuk mengecek apakah wifi sudah tersambung
bool notificationSent = false; // Variabel untuk melacak apakah notifikasi telah dikirim

void setup() {
    Serial.begin(115200);
    lcd.init();
    lcd.backlight();
    
    pinMode(LED_HIJAU, OUTPUT);
    pinMode(LED_KUNING, OUTPUT);
    pinMode(LED_MERAH, OUTPUT);
    pinMode(BUZZER_PIN, OUTPUT); // Inisialisasi pin untuk buzzer sebagai output
    pinMode(ISD1820_PIN, OUTPUT); // Inisialisasi pin untuk modul ISD1820 sebagai output

    myServo.attach(SERVO_PIN);
    
    Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
}

void loop() {
    Blynk.run();

    // Cek status Wi-Fi
    if (WiFi.status() == WL_CONNECTED && !wifiConnected) {
        wifiConnected = true; // Perbarui status koneksi Wi-Fi
        Serial.println("ESP32 terhubung ke Wi-Fi.");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("WiFi connected");
        lcd.setCursor(0, 1);
        lcd.print(ssid);
        delay(2000); // Delay untuk menunjukkan pesan koneksi Wi-Fi
        lcd.clear();
    }

    // Mengukur jarak menggunakan sensor ultrasonik
    unsigned int distance1 = sensor1.ping_cm();
    unsigned int distance2 = sensor2.ping_cm();

    // Jika ada masalah dengan sensor, tampilkan pesan kesalahan
    if (distance1 == -1) {
        Serial.println("Error: Tidak dapat mengukur jarak dengan sensor jarak");
        // Menghidupkan buzzer untuk menandakan malfungsi sensor
        digitalWrite(BUZZER_PIN, HIGH); // Aktifkan modul
                return;
    } else {
        digitalWrite(BUZZER_PIN, LOW);
    }

    if (distance2 == -1) {
        Serial.println("Error: Tidak dapat mengukur jarak dengan sensor kapasitas");
        // Menghidupkan buzzer untuk menandakan malfungsi sensor
        digitalWrite(BUZZER_PIN, HIGH);// Aktifkan modul
                return;
    } else {
        digitalWrite(BUZZER_PIN, LOW);
    }

    // Menghitung kapasitas
    float capacity = ((MAX_DISTANCE - distance2) / float(MAX_DISTANCE)) * 100;
    Serial.print("Kapasitas: ");
    Serial.println(capacity);
    Serial.print("Jarak: ");
    Serial.println(distance1);

    // Update LCD
    lcd.clear();
    lcd.setCursor(1, 0);
    lcd.print("Kapasitas: ");
    lcd.print(capacity, 0);
    lcd.print("%");

    // Kirim data ke Blynk
    Blynk.virtualWrite(V1, capacity);
    Blynk.virtualWrite(V2, distance1);
    // Blynk.virtualWrite(V3, LED_HIJAU);
    // Blynk.virtualWrite(V4, LED_KUNING);
    // Blynk.virtualWrite(V0, LED_MERAH);


    // Kendali LED
    unsigned long currentTime = millis();

    if (capacity < 50) {
        if (currentTime - previousTimeH >= 4000) {
            digitalWrite(LED_HIJAU, !digitalRead(LED_HIJAU));
            previousTimeH = currentTime;
        }
    } else if (capacity >= 50 && capacity < 85) {
        if (currentTime - previousTimeK >= 2500) {
            digitalWrite(LED_KUNING, !digitalRead(LED_KUNING));
            previousTimeK = currentTime;
        }
    } else {
        if (currentTime - previousTimeM >= 1000) {
            digitalWrite(LED_MERAH, !digitalRead(LED_MERAH));
            previousTimeM = currentTime;

            Serial.println("Kapasitas hampir penuh");

            // Mengirim notifikasi ketika kapasitas hampir penuh
            if (!notificationSent) {
                Blynk.logEvent("kapasitas_hampir_penuh"); // Kirim notifikasi ke aplikasi Blynk
                notificationSent = true; // Perbarui variabel notifikasi
            }

            // Kendali buzzer saat kapasitas mencapai 100%
            if (capacity == 100) {
                digitalWrite(BUZZER_PIN, HIGH);
                digitalWrite(ISD1820_PIN, HIGH); // Aktifkan modul
                Serial.println("Kapasitas penuh! Harap dikosongkan isi tempat sampah!");
                
                // Mengirim notifikasi Blynk
                if (!notificationSent) {
                    Blynk.logEvent("Kapasitas_penuh_Harap_dikosongkan"); // Mengirim notifikasi Blynk
                    notificationSent = true; // Perbarui variabel notifikasi
                }
            } else {
                digitalWrite(BUZZER_PIN, LOW);
                digitalWrite(ISD1820_PIN, LOW); // Matikan modul
            }
        }
    }

    // Kendali servo
    if (distance1 <= 10) {
        // Nyalakan LED secara bergantian
        digitalWrite(LED_HIJAU, HIGH);
        delay(100);
        digitalWrite(LED_HIJAU, LOW);
        digitalWrite(LED_KUNING, HIGH);
        delay(100);
        digitalWrite(LED_KUNING, LOW);
        digitalWrite(LED_MERAH, HIGH);
        delay(100);
        digitalWrite(LED_MERAH, LOW);

        // Gerakkan servo ke 180 derajat
        myServo.write(180);
    } else {
        // Matikan LED
        digitalWrite(LED_HIJAU, LOW);
        digitalWrite(LED_KUNING, LOW);
        digitalWrite(LED_MERAH, LOW);

        // Gerakkan servo kembali ke 0 derajat
        myServo.write(0);
    }
    delay(1000);
}
